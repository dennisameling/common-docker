#
# Copyright 2017 Confluent Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
ARG UBI_MINIMAL_VERSION="8.5-204"
FROM registry.access.redhat.com/ubi8/ubi-minimal:${UBI_MINIMAL_VERSION}

# 7.0.1
ARG PROJECT_VERSION="7.0.1"

# cp-base-new
ARG ARTIFACT_ID="cp-base-new"

# Remember where we came from
LABEL io.confluent.docker.git.repo="confluentinc/common-docker"

# unknown
ARG GIT_COMMIT
LABEL io.confluent.docker.git.id=$GIT_COMMIT

ARG BUILD_NUMBER=-1
LABEL io.confluent.docker.build.number=$BUILD_NUMBER

LABEL maintainer="tools@confluent.io"
LABEL vendor="Confluent"
LABEL version=$GIT_COMMIT
LABEL release=$PROJECT_VERSION
LABEL name=$ARTIFACT_ID
LABEL summary="Common base image for Confluent's Docker images."
LABEL description="Common base image for Confluent's Docker images."
LABEL io.confluent.docker=true

# This affects how strings in Java class files are interpreted.  We want UTF-8 and this is the only locale in the
# base image that supports it
ENV LANG="C.UTF-8"

# Set the classpath for JARs required by `cub`
ENV CUB_CLASSPATH='"/usr/share/java/cp-base-new/*"'

# These are build tools (and dependencies) needed to build & install confluent-docker-utils.
# These will be removed after confluent-docker-utils is installed.
ENV BUILD_TOOLS="git make gcc findutils python3-devel"

# These ARGs are left blank indicating to the Dnf package manager to install the latest package
# version that happens to be availible at this time. For reproducible builds, versions should be specified
# as '-1.2.3-4.el8' on the command line. Or more preferibly the 'dockerfile-maven-plugin' is used
# where these arguments are set in base/pom.xml under the <buildArgs> elements based on the commit you're
# building from.

# Redhat Package Versions
ARG OPENSSL_VERSION="-1.1.1k-5.el8_5"
ARG WGET_VERSION="-1.19.5-10.el8"
ARG NETCAT_VERSION="-7.70-6.el8"
ARG PYTHON36_VERSION="-3.6.8-38.module+el8.5.0+12207+5c5719bc"
ARG TAR_VERSION="-1.30-5.el8"
ARG PROCPS_VERSION="-3.3.15-6.el8"
ARG KRB5_WORKSTATION_VERSION="-1.18.2-14.el8"
ARG IPUTILS_VERSION="-20180629-7.el8"
ARG HOSTNAME_VERSION="-3.20-6.el8"

# OpenJDK version
ARG OPENJDK_VERSION="-1:11.0.13.0.8-4.el8_5"

# Python Module Versions
ARG PYTHON_PIP_VERSION="==21.*"
ARG PYTHON_SETUPTOOLS_VERSION="==54.*"

# Confluent Docker Utils Version (Namely the tag or branch to grab from git to install)
ARG PYTHON_CONFLUENT_DOCKER_UTILS_VERSION="v0.0.49"

# This can be overriden for an offline/air-gapped builds
ARG PYTHON_CONFLUENT_DOCKER_UTILS_INSTALL_SPEC="git+https://github.com/confluentinc/confluent-docker-utils@${PYTHON_CONFLUENT_DOCKER_UTILS_VERSION}"

RUN microdnf --nodocs install yum \
    && rpm --import https://www.azul.com/files/0xB1998361219BD9C9.txt \
    && yum --nodocs -y install https://cdn.azul.com/zulu/bin/zulu-repo-1.0.0-1.noarch.rpm \
    && yum --nodocs install -y --setopt=install_weak_deps=False \
        ${BUILD_TOOLS} \
        "openssl${OPENSSL_VERSION}" \
        "wget${WGET_VERSION}" \
        "nmap-ncat${NETCAT_VERSION}" \
        "python36${PYTHON36_VERSION}" \
        "tar${TAR_VERSION}" \
        "procps-ng${PROCPS_VERSION}" \
        "krb5-workstation${KRB5_WORKSTATION_VERSION}" \
        "iputils${IPUTILS_VERSION}" \
        "hostname${HOSTNAME_VERSION}" \
        "java-11-openjdk-headless${OPENJDK_VERSION}" "java-11-openjdk-devel${OPENJDK_VERSION}" \
    && alternatives --set python /usr/bin/python3 \
    && python3 -m pip install --upgrade "pip${PYTHON_PIP_VERSION}" "setuptools${PYTHON_SETUPTOOLS_VERSION}" \
    && python3 -m pip install --prefer-binary --prefix=/usr/local --upgrade "${PYTHON_CONFLUENT_DOCKER_UTILS_INSTALL_SPEC}" \
    # && yum remove -y ${BUILD_TOOLS} \
    # Work around until Redhat releases updated base image
    && yum --nodocs update -y tzdata libgcc libstdc++ \
    && yum clean all \
    && rm -rf /tmp/* \
    && mkdir -p /etc/confluent/docker /usr/logs \
    && useradd --no-log-init --create-home --shell /bin/bash appuser \
    && chown appuser:appuser -R /etc/confluent/ /usr/logs

# This is a step that will cause the build to fail of the package manager detects a package update is availible and isn't installed.
# The ARG SKIP_SECURITY_UPDATE_CHECK is an "escape" hatch if you want to by-pass this check and build the container anyways, which
# is not advisable in terms of security posture. If set to false (which triggers a shell exit(1) if the check fails from the left
# hand of ||) this check will fail. If true (which triggers a right-hand || shell exit(0)), then this check will pass even if a
# security update is availible. We skip checks from ZuluJDK repos because Confluent pins those upstream versions for various reasons 
# such as identified bugs in ZuluJDK's software.
ARG SKIP_SECURITY_UPDATE_CHECK="false"
RUN yum check-update || "${SKIP_SECURITY_UPDATE_CHECK}"

ADD --chown=appuser:appuser target/${ARTIFACT_ID}-${PROJECT_VERSION}-package/share/doc/* /usr/share/doc/${ARTIFACT_ID}/
ADD --chown=appuser:appuser target/${ARTIFACT_ID}-${PROJECT_VERSION}-package/share/java/${ARTIFACT_ID}/* /usr/share/java/${ARTIFACT_ID}/

COPY --chown=appuser:appuser include/etc/confluent/docker /etc/confluent/docker

# Ensure Java was installed correctly
RUN java --version

RUN mkdir /licenses
COPY license.txt /licenses

USER appuser
WORKDIR /home/appuser
